- hosts: database
  tasks:
  - name: Apt-get update
    apt: update_cache=yes
  - name: install software properties common
    apt: name=software-properties-common state=present

  - name: Add repository key to the system
    apt_key: keyserver=keyserver.ubuntu.com id=0xF1656F24C74CD1D8
  - name: Install MariaDB repository
    apt_repository: repo='deb [arch=amd64,arm64,ppc64el] http://mariadb.mirrors.ovh.net/MariaDB/repo/10.3/ubuntu bionic main'

#  - name: Add repository key to the system
#    apt_key: keyserver=keyserver.ubuntu.com id=0xF1656F24C74CD1D8
#  - name: Install MariaDB repository
#    apt_repository: repo='deb [arch=amd64] http://nyc2.mirrors.digitalocean.com/mariadb/repo/10.4/ubuntu bionic main'
  - name: Apt-get update
    apt: update_cache=yes
  - name: Install MariaDB Server
    apt: name=mariadb-server state=present
  - name: Determine required MySQL Python libraries.
    set_fact:
      deb_mysql_python_package: "{% if 'python3' in ansible_python_interpreter|default('') %}python3-mysqldb{% else %}python-mysqldb{% endif %}"
  - name: Ensure MySQL Python libraries are installed.
    apt: "name={{ deb_mysql_python_package }} state=present"

  - name: install python mysql bindings
    apt: name=python-mysqldb state=present
    become: yes
    become_method: sudo

  - name: Set discovered Ansible Python interpreter.
    set_fact:
      ansible_python_interpreter: "{{ ansible_facts.python.executable }}"
    when: ansible_python_interpreter is not defined

  - name: Apt-get update
    apt: update_cache=yes
  - name: set the sql root password
    mysql_user: user=root
                  password='password1'
                  host=localhost

#  - name: set the sql debian-sys-maint password
#    mysql_user: user=debian-sys-maint
#                  password='password1'
#                  host=localhost

  - name: Install rsync package
    apt: name=rsync state=present
  - name: copy cluster.cnf file
    template: src=files/cluster-cnf.j2 dest=/etc/mysql/conf.d/galera.cnf owner=root mode=0644
  - name: Apt-get update
    apt: update_cache=yes
  - name: stop mysql service
    service: name=mysql state=stopped
  - name: COMMAND | Bootstrap first node (systemd)
    command: galera_new_cluster
    when: play_hosts[0] == inventory_hostname

  - name: Start mysql in other nodes
    service: name=mysql state=restarted
    when: play_hosts[0] != inventory_hostname

  - name: Restart mysql on first node
    service: name=mysql state=restarted
    when: play_hosts[0] == inventory_hostname

#    when: ansible_service_mgr == 'systemd'
#  - name: Bootstrap mysql service
#    service: name=mysql state=started args='--wsrep-new-cluster'
#    when: play_hosts[0] == inventory_hostname
#  - name: bootstrap first node
#    shell: /tmp/bootstrap.sh >> bootstrap.txt
#  - name: Restart mysql on first node
#    service: name=mysql state=restarted
#    when: play_hosts[0] == inventory_hostname
  become: true
